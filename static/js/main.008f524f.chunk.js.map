{"version":3,"sources":["components/sidenav/Sidenav.js","App.js","serviceWorker.js","index.js"],"names":["Sidenav","useState","minimized","setMinimized","actionLabels","actionItems","actions","map","item","icon","index","ActionItem","key","label","className","data-minimized","BrandName","onClick","data-eva","data-eva-fill","props","data-eva-animation","App","eva","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAGe,SAASA,IAAU,IAAD,EAEKC,oBAAS,GAFd,mBAEtBC,EAFsB,KAEXC,EAFW,KAGzBC,EAAe,CAAC,OAAQ,kBAAmB,WAAY,aAAc,WAAY,QACjFC,EAAc,CAAC,OAAQ,YAAa,SAAU,UAAW,OAAQ,kBAGjEC,GAFJD,EAAcA,EAAYE,KAAI,SAAAC,GAAI,OAAKA,EAAO,eAEpBD,KAAI,SAACE,EAAMC,GAAP,OAAiB,kBAACC,EAAD,CAAYT,UAAWA,EAAWO,KAAMA,EAAMG,IAAKF,EAAOG,MAAOT,EAAaM,QAG7H,OACI,yBAAKI,UAAU,2BAA2BC,iBAAgBb,GACtD,yBAAKY,UAAU,iBACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,YAGnB,kBAACE,EAAD,CAAWd,UAAWA,IAEtB,kBAACS,EAAD,CAAYT,UAAWA,EAAWO,KAAK,iBAAiBI,MAAM,WAC7DP,EAED,yBAAKQ,UAAU,kDACVC,iBAAgBb,EAChBe,QAAS,kBAAMd,GAAcD,KAC9B,uBAAIgB,WAAS,wBACTC,gBAAc,YAOlC,SAASH,EAAUI,GACf,OACI,yBAAKN,UAAU,aACX,yBAAKA,UAAU,+BACf,yBAAKA,UAAU,YAAYC,iBAAgBK,EAAMlB,WAAjD,cAKZ,SAASS,EAAWS,GAChB,OACI,yBAAKN,UAAU,0CAA0CC,iBAAgBK,EAAMlB,WAC3E,yBAAKY,UAAU,+BACX,uBAAII,WAAUE,EAAMX,KAChBU,gBAAc,QACdE,qBAAmB,WAE3B,yBAAKP,UAAU,8BAA8BC,iBAAgBK,EAAMlB,WAAYkB,EAAMP,Q,ICpClFS,E,kLAZbC,c,+BAIA,OACC,yBAAKT,UAAU,OACd,kBAAC,EAAD,W,GATcU,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.008f524f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Sidenav.css';\n\nexport default function Sidenav(){\n\n    const [minimized, setMinimized] = useState(true);\n    let actionLabels = [\"Home\", \"Market Overview\", \"Security\", \"Industries\", \"Screener\", \"Chat\"];\n    let actionItems = [\"grid\", \"bar-chart\", \"shield\", \"pantone\", \"cast\", \"message-circle\"];\n    actionItems = actionItems.map(item => (item + \"-outline\"));\n\n    let actions = actionItems.map((icon, index) => <ActionItem minimized={minimized} icon={icon} key={index} label={actionLabels[index]}/>);\n\n\n    return (\n        <div className=\"Sidenav PositionRelative\" data-minimized={minimized}>\n            <div className=\"Row StatusBar\">\n                <div className=\"Action\"></div>\n                <div className=\"FillParent\"></div>\n                <div className=\"Action\"></div>\n                <div className=\"FillParent\"></div>\n                <div className=\"Action\"></div>\n            </div>\n\n            <BrandName minimized={minimized} />\n\n            <ActionItem minimized={minimized} icon=\"search-outline\" label=\"Search\"/>\n            {actions}\n\n            <div className=\"PositionAbsolute Row CenterV CenterH ToggleMode\" \n                 data-minimized={minimized}\n                 onClick={() => setMinimized(!minimized)}>\n                <i  data-eva=\"chevron-right-outline\" \n                    data-eva-fill=\"white\"></i>\n            </div>\n\n        </div>\n    );\n}\n\nfunction BrandName(props){\n    return (\n        <div className=\"Row Brand\">\n            <div className=\"PositionRelative BrandIcon\"></div>\n            <div className=\"BrandName\" data-minimized={props.minimized}>stocklabs</div>\n        </div>\n    );\n}\n\nfunction ActionItem(props){\n    return (\n        <div className=\"Row CenterV ActionItem PositionRelative\" data-minimized={props.minimized}>\n            <div className=\"PositionRelative ActionIcon\">\n                <i  data-eva={props.icon} \n                    data-eva-fill=\"white\" \n                    data-eva-animation=\"shake\"></i>\n            </div>\n            <div className=\"PositionRelative ActionName\" data-minimized={props.minimized}>{props.label}</div>\n        </div>\n    );\n}","import React from 'react';\nimport * as eva from 'eva-icons';\nimport './App.css';\nimport Sidenav from './components/sidenav/Sidenav';\n\nclass App extends React.Component {\n\n\tcomponentDidMount(){\n\t\teva.replace();\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Sidenav />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}